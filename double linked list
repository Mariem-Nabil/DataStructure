#include<bits/stdc++.h>
using namespace std;
template <class t>
class double_linked_list {
    struct nodeType {
        t info;
        nodeType *next;
        nodeType *back;
    };
    nodeType *head,*tail;
    int size;
public:
    double_linked_list(){
        head =  nullptr;tail = nullptr;size = 0;
    }
    void insertAtHead(t element){
        nodeType *newn=new nodeType;
        newn->value=element;
        if (head == nullptr){
            newn->prev=newn->next= nullptr;
            head = tail =newn;
        }
        else{
            newn->next=head;
            head->prev=newn;
            newn->prev= nullptr;
            head=newn;
        }
        size++;
    }
    void insertAtTail(t element){
        nodeType *newn=new nodeType;
        newn->value=element;
        if (head == nullptr){
            newn->prev=newn->next= nullptr;
            head =tail =newn;
        }
        else{
            newn->prev=tail;
            newn->next= nullptr;
            tail->next=newn;
            tail=newn;
        }
        size++;
    }
    void insertAT(t element,int index){
        if (index < 0 || index >= size) cout << "invalid index\n";
        else if(index == 0) insertAtHead(element);
        else if(index == size - 1) insertAtTail(element);
        else{
            nodeType *newn = new nodeType,*temp = head;
            for (int i = 0; i < index; ++i) {
                temp = temp->next;
            }
            newn->next=temp->next;
            newn->back = temp;
            newn->next->back = newn;
            temp->next = newn;
            size++;
        }
    }
    void removeAtHead(){
        if (head == nullptr) cout << "list is already empty";
        else{
            nodeType *temp=head;
            head=head->next;
            delete temp;
            head->prev= nullptr;
            size--;
        }
    }
    void removeAtTail(){
        if (head == nullptr) cout << "list is already empty";
        else{
            nodeType *temp=tail;
            tail=tail->prev;
            delete temp;
            tail->next= nullptr;
            size--;
        }
    }
    void removeAT(int index) {
        if (index < 0 || index >= size){
            cout << "invalid index\n";
        } else if (index == 0) {
            removeAtHead();
        } else if (index == size - 1) {
            removeAtTail();
        } else {
            nodeType *temp = head;
            for (int i = 0; i < index; ++i){
                temp = temp->next;
            }
            temp->next->back = temp->back;
            temp->next->next = temp->next;
            delete temp;
            size--;
        }
    }
        bool isEmpty(){
            return head == nullptr;
        }
        int doubleLinkedListSize(){
            return size;
        }
    t retrieveAt(int index) {
        if (index < 0 || index >= size) cout << "invalid index\n";
        else if (index == 0)return head->info;
        else if (index == size - 1)return tail->info;
        else{
            nodeType *temp = head;
            for (int i = 0; i < index; ++i){
                temp = temp->next;
            }
            return temp->info;

        }
    }
    void print() const
    {
        nodeType *current; //pointer to traverse the list
        current = head; //set current to point to the first node
        while (current != nullptr){
             cout << current->info << " "; //output info
             current = current->next;
                }
    }
    void clear()
    {
        nodeType *temp; //pointer to delete the node
        while (head != nullptr)
        {
            temp = head;
            head = head->next;
            delete temp;
        }
        tail = nullptr;
        size = 0;
    }
void replaceAt (t newElement, int index){
        if (index < 0 || index >= size){
            cout << "invalid index\n";
        } else if (index == 0) {
            head->info = newElement;
        } else if (index == size - 1) {
            tail->info = newElement;
        } else {
            nodeType *temp = head;
            for (int i = 0; i < index; ++i){
                temp = temp->next;
            }
            temp->info = newElement;
        }
    }
    bool isExist (t  element){
        nodeType* temp = head;
        for (int i = 0; i < size; ++i) {
            if (temp->info == element)return true;
            temp = temp->next;
        }
    }
    bool isItemAtEqual (t  element, int index){
        nodeType* temp = head;
        for (int i = 0; i < index; ++i) {
            temp = temp->next;
        }
        return temp->info == element;
    }
void Swap (int firstItemIdx, int secondItemIdx) {
        if (firstItemIdx < 0 || firstItemIdx >= size || secondItemIdx < 0 || secondItemIdx >= size) {
            cout << "invalid index\n";
        }
        nodeType *temp1 = head, *temp2 = head;
        if (firstItemIdx == secondItemIdx)return;
        else {
            for (int i = 0; i < firstItemIdx; ++i) {
                temp1 = temp1->next;
            }
            for (int i = 0; i < secondItemIdx; ++i) {
                temp2 = temp2->next;
            }
        }
        if (firstItemIdx > secondItemIdx) swap(secondItemIdx,firstItemIdx);
        if (temp1->next == temp2) {
            nodeType *temp = temp1->prev;
            if (temp != nullptr) {
                temp->next = temp2;
            } else {
                head = temp2;
            }
            temp2->prev = temp;
            temp1->prev = temp2;
            temp1->next = temp2->next;
            if (temp2->next != nullptr) {
                temp2->next->prev = temp1;
            }
            temp2->next = temp1;
        }
        else {
            nodeType *tempPrev1 = temp1->prev;
            nodeType *tempNext1 = temp1->next;
            nodeType *tempPrev2 = temp2->prev;
            nodeType *tempNext2 = temp2->next;

            if (tempPrev1 != nullptr) {
                tempPrev1->next = temp2;
            } else {
                head = temp2;
            }
            if (tempNext1 != nullptr) {
                tempNext1->prev = temp2;
            }
            if (tempPrev2 != nullptr) {
                tempPrev2->next = temp1;
            }
            if (tempNext2 != nullptr) {
                tempNext2->prev = temp1;
            }

            temp1->prev = tempPrev2;
            temp1->next = tempNext2;
            temp2->prev = tempPrev1;
            temp2->next = tempNext1;
        }
    }

};
int main() {
    double_linked_list<int> list;
    list.insertAtHead(33);
    list.insertAtTail(44);
    list.insertAT(12,1);
    list.insertAT(11,0);
    list.Swap(0,3);
    list.print();
}

    


